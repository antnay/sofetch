// use std::env;
// use std::env::consts::ARCH;
use colored::Colorize;
use itertools_cycle::Cycle;
use std::time::Instant;
use std::{env::var, path::PathBuf};

use whoami::{arch, devicename, distro, username};

fn main() {
    let now = Instant::now();
    let shell_path = PathBuf::from(var("SHELL").unwrap_or(String::from("N/A")));
    let shell = shell_path
        .file_name()
        .expect("Could not get $SHELL path")
        .to_str()
        .unwrap();
    // enum Colors {
    //     Red = bright_red(),
    // }
    let color_styles = [
        "bright_red".red().bold(),
        "bright_green".green().bold(),
        "bright_cyan".cyan().bold(),
        "bright_blue".blue().bold(),
        "bright_magenta".magenta().bold(),
        "bright_yellow".yellow().bold(),
    ];

    let mut color_iter = color_styles.iter().cycle();

    // let color_iter = std::iter::repeat(color_styles.iter())
    //     .take(4)
    //     .flatten()
    //     .collect::<Vec<_>>();
    // dbg!(color_iter);

    println!("{:>19} {}", "user:", username().color(color_iter.next()));
    println!("{:>19} {}", "os:", distro().color(color_iter.next()));
    println!("{:>19} {}", "host:", devicename().color(color_iter.next()));
    println!("{:>19} {}", "shell:", shell.color(color_iter.next()));
    println!(
        "{:>19} {}",
        "arch:",
        arch().to_string().color(color_iter.next())
    );
    // println!("{:>19} {}", "user:", username().bright_red().bold());
    // println!("{:>19} {}", "os:", distro().bright_green().bold());
    // println!("{:>19} {}", "host:", devicename().bright_cyan().bold());
    // // println!("{:>19} {}", "DE:", desktop_env().to_string().bright_blue().bold());
    // println!("{:>19} {}", "shell:", shell.bright_magenta().bold());
    // println!(
    //     "{:>19} {}",
    //     "arch:",
    //     arch().to_string().bright_yellow().bold()
    // );
    // ps -p $$ -o 'args=' for shell
    // brew list --formulae | wc -l for pkg count
    let elapsed = now.elapsed();
    println!("Elapsed: {:.2?}", elapsed);
}
